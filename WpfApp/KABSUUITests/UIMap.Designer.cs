// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 16.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace KABSUUITests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Test to clicking "Modify Record" button opens the "Search" Window
        /// </summary>
        public void OpeningModifyRecordWindow()
        {
            #region Variable Declarations
            WpfButton uIModifyRecordButton = this.UIDatabaseAppWindow.UIModifyRecordButton;
            #endregion

            // Click 'Modify Record' button
            Mouse.Click(uIModifyRecordButton, new Point(80, 13));
        }
        
        /// <summary>
        /// Tests to verify that the "Owner" filter works in searching
        /// </summary>
        public void SearchingByOwner()
        {
            #region Variable Declarations
            WpfWindow uIWpfWindow = this.UIDatabaseAppWindow.UIWpfWindow;
            WpfWindow uIWpfWindow1 = this.UISearchWindow.UIWpfWindow;
            WpfEdit uIUxSearchContents1Edit = this.UISearchWindow.UIUxSearchContents1Edit;
            WpfComboBox uIUxSearchTerm1ComboBox = this.UISearchWindow.UIUxSearchTerm1ComboBox;
            WpfWindow uIWpfWindow2 = this.UISearchResultsWindow.UIWpfWindow;
            #endregion

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(413, 58));

            // Move 'Wpf' window
            Mouse.StartDragging(uIWpfWindow1, new Point(76, 19));
            Mouse.StopDragging(uIWpfWindow1, 196, 203);

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow1, new Point(66, 69));

            // Type 'Mouse' in 'uxSearchContents1' text box
            uIUxSearchContents1Edit.Text = this.SearchingByOwnerParams.UIUxSearchContents1EditText;

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow1, new Point(250, 71));

            // Select 'Owner' in 'uxSearchTerm1' combo box
            uIUxSearchTerm1ComboBox.SelectedItem = this.SearchingByOwnerParams.UIUxSearchTerm1ComboBoxSelectedItem;

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow1, new Point(411, 176));

            // Move 'Wpf' window
            Mouse.StartDragging(uIWpfWindow2, new Point(1242, 129));
            Mouse.StopDragging(uIWpfWindow2, -27, 480);
        }
        
        /// <summary>
        /// Test to verify the filet "Owner" works
        /// </summary>
        public void SearchByOwnerFilter()
        {
            #region Variable Declarations
            WpfButton uIModifyRecordButton = this.UIDatabaseAppWindow.UIModifyRecordButton;
            WpfEdit uIUxSearchContents1Edit = this.UISearchWindow.UIUxSearchContents1Edit;
            WpfComboBox uIUxSearchTerm1ComboBox = this.UISearchWindow.UIUxSearchTerm1ComboBox;
            WpfButton uISearchButton = this.UISearchWindow.UISearchButton;
            #endregion

            // Click 'Modify Record' button
            Mouse.Click(uIModifyRecordButton, new Point(49, 20));

            // Type 'Mouse' in 'uxSearchContents1' text box
            uIUxSearchContents1Edit.Text = this.SearchByOwnerFilterParams.UIUxSearchContents1EditText;

            // Select 'Owner' in 'uxSearchTerm1' combo box
            uIUxSearchTerm1ComboBox.SelectedItem = this.SearchByOwnerFilterParams.UIUxSearchTerm1ComboBoxSelectedItem;

            // Click 'Search' button
            Mouse.Click(uISearchButton, new Point(56, 23));
        }
        
        /// <summary>
        /// To test if the "Breed" filter is working
        /// </summary>
        public void SearchByBreedFilter()
        {
            #region Variable Declarations
            WpfButton uIModifyRecordButton = this.UIDatabaseAppWindow.UIModifyRecordButton;
            WpfEdit uIUxSearchContents1Edit = this.UISearchWindow.UIUxSearchContents1Edit;
            WpfComboBox uIUxSearchTerm1ComboBox = this.UISearchWindow.UIUxSearchTerm1ComboBox;
            WpfButton uISearchButton = this.UISearchWindow.UISearchButton;
            #endregion

            // Click 'Modify Record' button
            Mouse.Click(uIModifyRecordButton, new Point(94, 23));

            // Type 'Mouse' in 'uxSearchContents1' text box
            uIUxSearchContents1Edit.Text = this.SearchByBreedFilterParams.UIUxSearchContents1EditText;

            // Select 'Breed' in 'uxSearchTerm1' combo box
            uIUxSearchTerm1ComboBox.SelectedItem = this.SearchByBreedFilterParams.UIUxSearchTerm1ComboBoxSelectedItem;

            // Click 'Search' button
            Mouse.Click(uISearchButton, new Point(34, 14));
        }
        
        /// <summary>
        /// To test if "Animal Name" Filter is wokring
        /// </summary>
        public void SearchByAnimalNameFilter()
        {
            #region Variable Declarations
            WpfButton uIModifyRecordButton = this.UIDatabaseAppWindow.UIModifyRecordButton;
            WpfEdit uIUxSearchContents1Edit = this.UISearchWindow.UIUxSearchContents1Edit;
            WpfComboBox uIUxSearchTerm1ComboBox = this.UISearchWindow.UIUxSearchTerm1ComboBox;
            WpfButton uISearchButton = this.UISearchWindow.UISearchButton;
            #endregion

            // Click 'Modify Record' button
            Mouse.Click(uIModifyRecordButton, new Point(107, 27));

            // Type 'Holy Smoker' in 'uxSearchContents1' text box
            uIUxSearchContents1Edit.Text = this.SearchByAnimalNameFilterParams.UIUxSearchContents1EditText;

            // Select 'Animal Name' in 'uxSearchTerm1' combo box
            uIUxSearchTerm1ComboBox.SelectedItem = this.SearchByAnimalNameFilterParams.UIUxSearchTerm1ComboBoxSelectedItem;

            // Click 'Search' button
            Mouse.Click(uISearchButton, new Point(36, 22));
        }
        
        /// <summary>
        /// To test if "Code" filter is working
        /// </summary>
        public void SearchByCodeFilter()
        {
            #region Variable Declarations
            WpfButton uIModifyRecordButton = this.UIDatabaseAppWindow.UIModifyRecordButton;
            WpfEdit uIUxSearchContents1Edit = this.UISearchWindow.UIUxSearchContents1Edit;
            WpfComboBox uIUxSearchTerm1ComboBox = this.UISearchWindow.UIUxSearchTerm1ComboBox;
            WpfButton uISearchButton = this.UISearchWindow.UISearchButton;
            #endregion

            // Click 'Modify Record' button
            Mouse.Click(uIModifyRecordButton, new Point(142, 25));

            // Type 'countyo' in 'uxSearchContents1' text box
            uIUxSearchContents1Edit.Text = this.SearchByCodeFilterParams.UIUxSearchContents1EditText;

            // Select 'Code' in 'uxSearchTerm1' combo box
            uIUxSearchTerm1ComboBox.SelectedItem = this.SearchByCodeFilterParams.UIUxSearchTerm1ComboBoxSelectedItem;

            // Click 'Search' button
            Mouse.Click(uISearchButton, new Point(18, 15));
        }
        
        /// <summary>
        /// To test if the "Can#" filter is working
        /// </summary>
        public void SearchByCanNoFilter()
        {
            #region Variable Declarations
            WpfButton uIModifyRecordButton = this.UIDatabaseAppWindow.UIModifyRecordButton;
            WpfEdit uIUxSearchContents1Edit = this.UISearchWindow.UIUxSearchContents1Edit;
            WpfComboBox uIUxSearchTerm1ComboBox = this.UISearchWindow.UIUxSearchTerm1ComboBox;
            WpfButton uISearchButton = this.UISearchWindow.UISearchButton;
            #endregion

            // Click 'Modify Record' button
            Mouse.Click(uIModifyRecordButton, new Point(88, 11));

            // Type '658' in 'uxSearchContents1' text box
            uIUxSearchContents1Edit.Text = this.SearchByCanNoFilterParams.UIUxSearchContents1EditText;

            // Select 'Can #' in 'uxSearchTerm1' combo box
            uIUxSearchTerm1ComboBox.SelectedItem = this.SearchByCanNoFilterParams.UIUxSearchTerm1ComboBoxSelectedItem;

            // Click 'Search' button
            Mouse.Click(uISearchButton, new Point(49, 13));
        }
        
        /// <summary>
        /// to test if the "Can #" filter works
        /// </summary>
        public void SearchByCanFilter()
        {
            #region Variable Declarations
            WpfButton uIModifyRecordButton = this.UIDatabaseAppWindow.UIModifyRecordButton;
            WpfEdit uIUxSearchContents1Edit = this.UISearchWindow.UIUxSearchContents1Edit;
            WpfComboBox uIUxSearchTerm1ComboBox = this.UISearchWindow.UIUxSearchTerm1ComboBox;
            WpfButton uISearchButton = this.UISearchWindow.UISearchButton;
            WinButton uICloseButton = this.UISearchResultsWindow1.UICloseButton;
            #endregion

            // Click 'Modify Record' button
            Mouse.Click(uIModifyRecordButton, new Point(124, 20));

            // Type '658' in 'uxSearchContents1' text box
            uIUxSearchContents1Edit.Text = this.SearchByCanFilterParams.UIUxSearchContents1EditText;

            // Select 'Can #' in 'uxSearchTerm1' combo box
            uIUxSearchTerm1ComboBox.SelectedItem = this.SearchByCanFilterParams.UIUxSearchTerm1ComboBoxSelectedItem;

            // Click 'Search' button
            Mouse.Click(uISearchButton, new Point(51, 16));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(30, 19));
        }
        
        /// <summary>
        /// To test if the "Town" filter is working
        /// </summary>
        public void SearchByTownFilter()
        {
            #region Variable Declarations
            WpfButton uIModifyRecordButton = this.UIDatabaseAppWindow.UIModifyRecordButton;
            WpfEdit uIUxSearchContents1Edit = this.UISearchWindow.UIUxSearchContents1Edit;
            WpfComboBox uIUxSearchTerm1ComboBox = this.UISearchWindow.UIUxSearchTerm1ComboBox;
            WpfButton uISearchButton = this.UISearchWindow.UISearchButton;
            #endregion

            // Click 'Modify Record' button
            Mouse.Click(uIModifyRecordButton, new Point(129, 22));

            // Type 'Lemasa' in 'uxSearchContents1' text box
            uIUxSearchContents1Edit.Text = this.SearchByTownFilterParams.UIUxSearchContents1EditText;

            // Select 'Town' in 'uxSearchTerm1' combo box
            uIUxSearchTerm1ComboBox.SelectedItem = this.SearchByTownFilterParams.UIUxSearchTerm1ComboBoxSelectedItem;

            // Click 'Search' button
            Mouse.Click(uISearchButton, new Point(26, 16));
        }
        
        /// <summary>
        /// To test if the "State" filter is working
        /// </summary>
        public void SearchByStateFilter()
        {
            #region Variable Declarations
            WpfButton uIModifyRecordButton = this.UIDatabaseAppWindow.UIModifyRecordButton;
            WpfEdit uIUxSearchContents1Edit = this.UISearchWindow.UIUxSearchContents1Edit;
            WpfComboBox uIUxSearchTerm1ComboBox = this.UISearchWindow.UIUxSearchTerm1ComboBox;
            WpfButton uISearchButton = this.UISearchWindow.UISearchButton;
            #endregion

            // Click 'Modify Record' button
            Mouse.Click(uIModifyRecordButton, new Point(104, 23));

            // Type 'KS' in 'uxSearchContents1' text box
            uIUxSearchContents1Edit.Text = this.SearchByStateFilterParams.UIUxSearchContents1EditText;

            // Select 'State' in 'uxSearchTerm1' combo box
            uIUxSearchTerm1ComboBox.SelectedItem = this.SearchByStateFilterParams.UIUxSearchTerm1ComboBoxSelectedItem;

            // Click 'Search' button
            Mouse.Click(uISearchButton, new Point(20, 12));
        }
        
        /// <summary>
        /// To test if searhicng by two filters work
        /// </summary>
        public void SearchByOwnerAndByBreed()
        {
            #region Variable Declarations
            WpfButton uIModifyRecordButton = this.UIDatabaseAppWindow.UIModifyRecordButton;
            WpfEdit uIUxSearchContents1Edit = this.UISearchWindow.UIUxSearchContents1Edit;
            WpfComboBox uIUxSearchTerm1ComboBox = this.UISearchWindow.UIUxSearchTerm1ComboBox;
            WpfEdit uIUxSearchContents2Edit = this.UISearchWindow.UIUxSearchContents2Edit;
            WpfComboBox uIUxSearchTerm2ComboBox = this.UISearchWindow.UIUxSearchTerm2ComboBox;
            WpfButton uISearchButton = this.UISearchWindow.UISearchButton;
            WinButton uICloseButton = this.UISearchResultsWindow1.UICloseButton;
            #endregion

            // Click 'Modify Record' button
            Mouse.Click(uIModifyRecordButton, new Point(61, 23));

            // Type 'Mouse' in 'uxSearchContents1' text box
            uIUxSearchContents1Edit.Text = this.SearchByOwnerAndByBreedParams.UIUxSearchContents1EditText;

            // Select 'Owner' in 'uxSearchTerm1' combo box
            uIUxSearchTerm1ComboBox.SelectedItem = this.SearchByOwnerAndByBreedParams.UIUxSearchTerm1ComboBoxSelectedItem;

            // Type 'Cross' in 'uxSearchContents2' text box
            uIUxSearchContents2Edit.Text = this.SearchByOwnerAndByBreedParams.UIUxSearchContents2EditText;

            // Select 'Breed' in 'uxSearchTerm2' combo box
            uIUxSearchTerm2ComboBox.SelectedItem = this.SearchByOwnerAndByBreedParams.UIUxSearchTerm2ComboBoxSelectedItem;

            // Click 'Search' button
            Mouse.Click(uISearchButton, new Point(48, 16));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(35, 20));
        }
        
        /// <summary>
        /// To test if searching by two filters work
        /// </summary>
        public void SearchByOwnerAndCross()
        {
            #region Variable Declarations
            WpfButton uIModifyRecordButton = this.UIDatabaseAppWindow.UIModifyRecordButton;
            WpfEdit uIUxSearchContents1Edit = this.UISearchWindow.UIUxSearchContents1Edit;
            WpfComboBox uIUxSearchTerm1ComboBox = this.UISearchWindow.UIUxSearchTerm1ComboBox;
            WpfEdit uIUxSearchContents2Edit = this.UISearchWindow.UIUxSearchContents2Edit;
            WpfComboBox uIUxSearchTerm2ComboBox = this.UISearchWindow.UIUxSearchTerm2ComboBox;
            WpfButton uISearchButton = this.UISearchWindow.UISearchButton;
            #endregion

            // Click 'Modify Record' button
            Mouse.Click(uIModifyRecordButton, new Point(120, 16));

            // Type 'Mouse' in 'uxSearchContents1' text box
            uIUxSearchContents1Edit.Text = this.SearchByOwnerAndCrossParams.UIUxSearchContents1EditText;

            // Select 'Owner' in 'uxSearchTerm1' combo box
            uIUxSearchTerm1ComboBox.SelectedItem = this.SearchByOwnerAndCrossParams.UIUxSearchTerm1ComboBoxSelectedItem;

            // Type 'Cross' in 'uxSearchContents2' text box
            uIUxSearchContents2Edit.Text = this.SearchByOwnerAndCrossParams.UIUxSearchContents2EditText;

            // Select 'Breed' in 'uxSearchTerm2' combo box
            uIUxSearchTerm2ComboBox.SelectedItem = this.SearchByOwnerAndCrossParams.UIUxSearchTerm2ComboBoxSelectedItem;

            // Click 'Search' button
            Mouse.Click(uISearchButton, new Point(28, 7));
        }
        
        /// <summary>
        /// to test if searching by 3 filters work
        /// </summary>
        public void SearchByOwnerAndByBreedAndByAnimalName()
        {
            #region Variable Declarations
            WpfButton uIModifyRecordButton = this.UIDatabaseAppWindow.UIModifyRecordButton;
            WpfEdit uIUxSearchContents1Edit = this.UISearchWindow.UIUxSearchContents1Edit;
            WpfComboBox uIUxSearchTerm1ComboBox = this.UISearchWindow.UIUxSearchTerm1ComboBox;
            WpfEdit uIUxSearchContents2Edit = this.UISearchWindow.UIUxSearchContents2Edit;
            WpfWindow uISearchWindow = this.UISearchWindow;
            WpfComboBox uIUxSearchTerm2ComboBox = this.UISearchWindow.UIUxSearchTerm2ComboBox;
            WpfEdit uIUxSearchContents3Edit = this.UISearchWindow.UIUxSearchContents3Edit;
            WpfComboBox uIUxSearchTerm3ComboBox = this.UISearchWindow.UIUxSearchTerm3ComboBox;
            WpfButton uISearchButton = this.UISearchWindow.UISearchButton;
            #endregion

            // Click 'Modify Record' button
            Mouse.Click(uIModifyRecordButton, new Point(98, 12));

            // Type 'Mouse' in 'uxSearchContents1' text box
            uIUxSearchContents1Edit.Text = this.SearchByOwnerAndByBreedAndByAnimalNameParams.UIUxSearchContents1EditText;

            // Select 'Owner' in 'uxSearchTerm1' combo box
            uIUxSearchTerm1ComboBox.SelectedItem = this.SearchByOwnerAndByBreedAndByAnimalNameParams.UIUxSearchTerm1ComboBoxSelectedItem;

            // Type 'Cross' in 'uxSearchContents2' text box
            uIUxSearchContents2Edit.Text = this.SearchByOwnerAndByBreedAndByAnimalNameParams.UIUxSearchContents2EditText;

            // Click 'Search' window
            Mouse.Click(uISearchWindow, new Point(215, 86));

            // Select 'Breed' in 'uxSearchTerm2' combo box
            uIUxSearchTerm2ComboBox.SelectedItem = this.SearchByOwnerAndByBreedAndByAnimalNameParams.UIUxSearchTerm2ComboBoxSelectedItem;

            // Type 'Holy Smoker' in 'uxSearchContents3' text box
            uIUxSearchContents3Edit.Text = this.SearchByOwnerAndByBreedAndByAnimalNameParams.UIUxSearchContents3EditText;

            // Select 'Animal Name' in 'uxSearchTerm3' combo box
            uIUxSearchTerm3ComboBox.SelectedItem = this.SearchByOwnerAndByBreedAndByAnimalNameParams.UIUxSearchTerm3ComboBoxSelectedItem;

            // Click 'Search' button
            Mouse.Click(uISearchButton, new Point(20, 19));
        }
        
        /// <summary>
        /// To test if searching with 4 filters work
        /// </summary>
        public void SearchByOwnerAndByBreedAndByAnimalNameAndByCode()
        {
            #region Variable Declarations
            WpfButton uIModifyRecordButton = this.UIDatabaseAppWindow.UIModifyRecordButton;
            WpfEdit uIUxSearchContents1Edit = this.UISearchWindow.UIUxSearchContents1Edit;
            WpfComboBox uIUxSearchTerm1ComboBox = this.UISearchWindow.UIUxSearchTerm1ComboBox;
            WpfEdit uIUxSearchContents2Edit = this.UISearchWindow.UIUxSearchContents2Edit;
            WpfComboBox uIUxSearchTerm2ComboBox = this.UISearchWindow.UIUxSearchTerm2ComboBox;
            WpfEdit uIUxSearchContents3Edit = this.UISearchWindow.UIUxSearchContents3Edit;
            WpfEdit uIUxSearchContents4Edit = this.UISearchWindow.UIUxSearchContents4Edit;
            WpfComboBox uIUxSearchTerm3ComboBox = this.UISearchWindow.UIUxSearchTerm3ComboBox;
            WpfComboBox uIUxSearchTerm4ComboBox = this.UISearchWindow.UIUxSearchTerm4ComboBox;
            WpfButton uISearchButton = this.UISearchWindow.UISearchButton;
            #endregion

            // Click 'Modify Record' button
            Mouse.Click(uIModifyRecordButton, new Point(36, 29));

            // Type 'Mouse' in 'uxSearchContents1' text box
            uIUxSearchContents1Edit.Text = this.SearchByOwnerAndByBreedAndByAnimalNameAndByCodeParams.UIUxSearchContents1EditText;

            // Select 'Owner' in 'uxSearchTerm1' combo box
            uIUxSearchTerm1ComboBox.SelectedItem = this.SearchByOwnerAndByBreedAndByAnimalNameAndByCodeParams.UIUxSearchTerm1ComboBoxSelectedItem;

            // Type 'Cross' in 'uxSearchContents2' text box
            uIUxSearchContents2Edit.Text = this.SearchByOwnerAndByBreedAndByAnimalNameAndByCodeParams.UIUxSearchContents2EditText;

            // Select 'Breed' in 'uxSearchTerm2' combo box
            uIUxSearchTerm2ComboBox.SelectedItem = this.SearchByOwnerAndByBreedAndByAnimalNameAndByCodeParams.UIUxSearchTerm2ComboBoxSelectedItem;

            // Type 'Holy Smoker' in 'uxSearchContents3' text box
            uIUxSearchContents3Edit.Text = this.SearchByOwnerAndByBreedAndByAnimalNameAndByCodeParams.UIUxSearchContents3EditText;

            // Type '54XB399' in 'uxSearchContents4' text box
            uIUxSearchContents4Edit.Text = this.SearchByOwnerAndByBreedAndByAnimalNameAndByCodeParams.UIUxSearchContents4EditText;

            // Select 'Animal Name' in 'uxSearchTerm3' combo box
            uIUxSearchTerm3ComboBox.SelectedItem = this.SearchByOwnerAndByBreedAndByAnimalNameAndByCodeParams.UIUxSearchTerm3ComboBoxSelectedItem;

            // Select 'Code' in 'uxSearchTerm4' combo box
            uIUxSearchTerm4ComboBox.SelectedItem = this.SearchByOwnerAndByBreedAndByAnimalNameAndByCodeParams.UIUxSearchTerm4ComboBoxSelectedItem;

            // Click 'Search' button
            Mouse.Click(uISearchButton, new Point(32, 17));
        }
        
        /// <summary>
        /// To test if a reocrd opens from the search results.
        /// </summary>
        public void OpenaRecordToModify()
        {
            #region Variable Declarations
            WpfButton uIModifyRecordButton = this.UIDatabaseAppWindow.UIModifyRecordButton;
            WpfEdit uIUxSearchContents1Edit = this.UISearchWindow.UIUxSearchContents1Edit;
            WpfComboBox uIUxSearchTerm1ComboBox = this.UISearchWindow.UIUxSearchTerm1ComboBox;
            WpfButton uISearchButton = this.UISearchWindow.UISearchButton;
            WinButton uICloseButton = this.UIRecordWindowWindow.UICloseButton;
            WinButton uICloseButton1 = this.UIAdditionalInfoWindow.UICloseButton;
            #endregion

            // Click 'Modify Record' button
            Mouse.Click(uIModifyRecordButton, new Point(156, 11));

            // Type 'Mouse' in 'uxSearchContents1' text box
            uIUxSearchContents1Edit.Text = this.OpenaRecordToModifyParams.UIUxSearchContents1EditText;

            // Select 'Owner' in 'uxSearchTerm1' combo box
            uIUxSearchTerm1ComboBox.SelectedItem = this.OpenaRecordToModifyParams.UIUxSearchTerm1ComboBoxSelectedItem;

            // Click 'Search' button
            Mouse.Click(uISearchButton, new Point(42, 18));

            // Last action on Row was not recorded because the control does not have any good identification property.

            // Last action on Row was not recorded because the control does not have any good identification property.

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(10, 24));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(21, 20));
        }
        
        /// <summary>
        /// letsseeifthisworks
        /// </summary>
        public void letsseeifthisworks()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIRecordWindowWindow.UICloseButton;
            WinButton uICloseButton1 = this.UIAdditionalInfoWindow.UICloseButton;
            #endregion

            // Last action on Row was not recorded because the control does not have any good identification property.

            // Last action on Row was not recorded because the control does not have any good identification property.

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(22, 23));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(26, 24));
        }
        
        /// <summary>
        /// To test for opening a record from the search result
        /// </summary>
        public void OpenaRecordFromSearchResult()
        {
            #region Variable Declarations
            WpfButton uIModifyRecordButton = this.UIDatabaseAppWindow.UIModifyRecordButton;
            WpfEdit uIUxSearchContents1Edit = this.UISearchWindow.UIUxSearchContents1Edit;
            WpfComboBox uIUxSearchTerm1ComboBox = this.UISearchWindow.UIUxSearchTerm1ComboBox;
            WpfButton uISearchButton = this.UISearchWindow.UISearchButton;
            #endregion

            // Click 'Modify Record' button
            Mouse.Click(uIModifyRecordButton, new Point(119, 31));

            // Type 'Mouse' in 'uxSearchContents1' text box
            uIUxSearchContents1Edit.Text = this.OpenaRecordFromSearchResultParams.UIUxSearchContents1EditText;

            // Select 'Owner' in 'uxSearchTerm1' combo box
            uIUxSearchTerm1ComboBox.SelectedItem = this.OpenaRecordFromSearchResultParams.UIUxSearchTerm1ComboBoxSelectedItem;

            // Click 'Search' button
            Mouse.Click(uISearchButton, new Point(38, 9));

            // Last action on Row was not recorded because the control does not have any good identification property.

            // Last action on Row was not recorded because the control does not have any good identification property.
        }
        
        /// <summary>
        /// Verify that the edited information was saved correctly
        /// </summary>
        public void VerifyEditing()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIRecordWindowWindow.UICloseButton;
            WinButton uICloseButton1 = this.UIAdditionalInfoWindow.UICloseButton;
            WinButton uICloseButton2 = this.UISearchResultsWindow1.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(32, 19));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(38, 19));

            // Click 'Close' button
            Mouse.Click(uICloseButton2, new Point(27, 16));
        }
        
        /// <summary>
        /// To verify the editedinformation was saved correclty.
        /// </summary>
        public void VerifyEditingWasSuccesful()
        {
            #region Variable Declarations
            WpfButton uIModifyRecordButton = this.UIDatabaseAppWindow.UIModifyRecordButton;
            WpfEdit uIUxSearchContents1Edit = this.UISearchWindow.UIUxSearchContents1Edit;
            WpfComboBox uIUxSearchTerm1ComboBox = this.UISearchWindow.UIUxSearchTerm1ComboBox;
            WpfButton uISearchButton = this.UISearchWindow.UISearchButton;
            WinButton uICloseButton = this.UIRecordWindowWindow.UICloseButton;
            WinButton uICloseButton1 = this.UIAdditionalInfoWindow.UICloseButton;
            #endregion

            // Click 'Modify Record' button
            Mouse.Click(uIModifyRecordButton, new Point(130, 20));

            // Type 'Mouse' in 'uxSearchContents1' text box
            uIUxSearchContents1Edit.Text = this.VerifyEditingWasSuccesfulParams.UIUxSearchContents1EditText;

            // Select 'Owner' in 'uxSearchTerm1' combo box
            uIUxSearchTerm1ComboBox.SelectedItem = this.VerifyEditingWasSuccesfulParams.UIUxSearchTerm1ComboBoxSelectedItem;

            // Click 'Search' button
            Mouse.Click(uISearchButton, new Point(19, 23));

            // Last action on Row was not recorded because the control does not have any good identification property.

            // Last action on Row was not recorded because the control does not have any good identification property.

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(18, 20));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(28, 22));
        }
        
        /// <summary>
        /// To test of the "Sum Of Units" return correct value
        /// </summary>
        public void TestForSumOfUnits()
        {
            #region Variable Declarations
            WpfButton uIModifyRecordButton = this.UIDatabaseAppWindow.UIModifyRecordButton;
            WpfEdit uIUxSearchContents1Edit = this.UISearchWindow.UIUxSearchContents1Edit;
            WpfComboBox uIUxSearchTerm1ComboBox = this.UISearchWindow.UIUxSearchTerm1ComboBox;
            WpfButton uISumofUnitsButton = this.UISearchWindow.UISumofUnitsButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Click 'Modify Record' button
            Mouse.Click(uIModifyRecordButton, new Point(57, 13));

            // Type 'Mouse Micky' in 'uxSearchContents1' text box
            uIUxSearchContents1Edit.Text = this.TestForSumOfUnitsParams.UIUxSearchContents1EditText;

            // Select 'Owner' in 'uxSearchTerm1' combo box
            uIUxSearchTerm1ComboBox.SelectedItem = this.TestForSumOfUnitsParams.UIUxSearchTerm1ComboBoxSelectedItem;

            // Click 'Sum of Units' button
            Mouse.Click(uISumofUnitsButton, new Point(55, 24));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(33, 19));
        }
        
        /// <summary>
        /// To test if "Sum Of Units" works with out search entries or filters and it should return total units.
        /// </summary>
        public void TestForTotalSumOfUnits()
        {
            #region Variable Declarations
            WpfButton uIModifyRecordButton = this.UIDatabaseAppWindow.UIModifyRecordButton;
            WpfButton uISumofUnitsButton = this.UISearchWindow.UISumofUnitsButton;
            #endregion

            // Click 'Modify Record' button
            Mouse.Click(uIModifyRecordButton, new Point(174, 32));

            // Click 'Sum of Units' button
            Mouse.Click(uISumofUnitsButton, new Point(46, 14));
        }
        
        /// <summary>
        /// ToSearchForSumOfUnitsWithDifferentFilter - Use 'ToSearchForSumOfUnitsWithDifferentFilterParams' to pass parameters into this method.
        /// </summary>
        public void ToSearchForSumOfUnitsWithDifferentFilter()
        {
            #region Variable Declarations
            WpfButton uIModifyRecordButton = this.UIDatabaseAppWindow.UIModifyRecordButton;
            WpfEdit uIUxSearchContents1Edit = this.UISearchWindow.UIUxSearchContents1Edit;
            WpfComboBox uIUxSearchTerm1ComboBox = this.UISearchWindow.UIUxSearchTerm1ComboBox;
            WpfButton uISumofUnitsButton = this.UISearchWindow.UISumofUnitsButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Click 'Modify Record' button
            Mouse.Click(uIModifyRecordButton, new Point(133, 27));

            // Type 'Mouse' in 'uxSearchContents1' text box
            uIUxSearchContents1Edit.Text = this.ToSearchForSumOfUnitsWithDifferentFilterParams.UIUxSearchContents1EditText;

            // Select 'Breed' in 'uxSearchTerm1' combo box
            uIUxSearchTerm1ComboBox.SelectedItem = this.ToSearchForSumOfUnitsWithDifferentFilterParams.UIUxSearchTerm1ComboBoxSelectedItem;

            // Click 'Sum of Units' button
            Mouse.Click(uISumofUnitsButton, new Point(32, 17));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(33, 14));
        }
        
        /// <summary>
        /// Trying a diffrent filter should return 0
        /// </summary>
        public void ToSearchForSumOfUnitsWithADifferentFilter()
        {
            #region Variable Declarations
            WpfButton uIModifyRecordButton = this.UIDatabaseAppWindow.UIModifyRecordButton;
            WpfEdit uIUxSearchContents1Edit = this.UISearchWindow.UIUxSearchContents1Edit;
            WpfComboBox uIUxSearchTerm1ComboBox = this.UISearchWindow.UIUxSearchTerm1ComboBox;
            WpfButton uISumofUnitsButton = this.UISearchWindow.UISumofUnitsButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Click 'Modify Record' button
            Mouse.Click(uIModifyRecordButton, new Point(122, 28));

            // Type 'Mouse' in 'uxSearchContents1' text box
            uIUxSearchContents1Edit.Text = this.ToSearchForSumOfUnitsWithADifferentFilterParams.UIUxSearchContents1EditText;

            // Select 'Breed' in 'uxSearchTerm1' combo box
            uIUxSearchTerm1ComboBox.SelectedItem = this.ToSearchForSumOfUnitsWithADifferentFilterParams.UIUxSearchTerm1ComboBoxSelectedItem;

            // Click 'Sum of Units' button
            Mouse.Click(uISumofUnitsButton, new Point(36, 13));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(59, 15));
        }
        
        /// <summary>
        /// IsThisGonnaWork - Use 'IsThisGonnaWorkParams' to pass parameters into this method.
        /// </summary>
        public void IsThisGonnaWork()
        {
            #region Variable Declarations
            WpfButton uIModifyRecordButton = this.UIDatabaseAppWindow.UIModifyRecordButton;
            WpfEdit uIUxSearchContents1Edit = this.UISearchWindow.UIUxSearchContents1Edit;
            WpfComboBox uIUxSearchTerm1ComboBox = this.UISearchWindow.UIUxSearchTerm1ComboBox;
            WpfButton uISumofUnitsButton = this.UISearchWindow.UISumofUnitsButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Click 'Modify Record' button
            Mouse.Click(uIModifyRecordButton, new Point(82, 14));

            // Type 'Mouse' in 'uxSearchContents1' text box
            uIUxSearchContents1Edit.Text = this.IsThisGonnaWorkParams.UIUxSearchContents1EditText;

            // Select 'Breed' in 'uxSearchTerm1' combo box
            uIUxSearchTerm1ComboBox.SelectedItem = this.IsThisGonnaWorkParams.UIUxSearchTerm1ComboBoxSelectedItem;

            // Click 'Sum of Units' button
            Mouse.Click(uISumofUnitsButton, new Point(43, 12));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(32, 14));
        }
        
        /// <summary>
        /// We will see
        /// </summary>
        public void NotSureAboutThis()
        {
            #region Variable Declarations
            WpfButton uIModifyRecordButton = this.UIDatabaseAppWindow.UIModifyRecordButton;
            WpfEdit uIUxSearchContents1Edit = this.UISearchWindow.UIUxSearchContents1Edit;
            WpfComboBox uIUxSearchTerm1ComboBox = this.UISearchWindow.UIUxSearchTerm1ComboBox;
            WpfButton uISumofUnitsButton = this.UISearchWindow.UISumofUnitsButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Click 'Modify Record' button
            Mouse.Click(uIModifyRecordButton, new Point(170, 24));

            // Type 'Mouse' in 'uxSearchContents1' text box
            uIUxSearchContents1Edit.Text = this.NotSureAboutThisParams.UIUxSearchContents1EditText;

            // Select 'Breed' in 'uxSearchTerm1' combo box
            uIUxSearchTerm1ComboBox.SelectedItem = this.NotSureAboutThisParams.UIUxSearchTerm1ComboBoxSelectedItem;

            // Click 'Sum of Units' button
            Mouse.Click(uISumofUnitsButton, new Point(47, 6));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(48, 13));
        }
        
        /// <summary>
        /// To test the adding a record functionality
        /// </summary>
        public void AddingRecord()
        {
            #region Variable Declarations
            WpfButton uIAddNewRecordButton = this.UIDatabaseAppWindow.UIAddNewRecordButton;
            WpfEdit uIUxCanNumEdit = this.UIRecordWindowWindow1.UIUxCanNumEdit;
            WpfEdit uIUxCodeEdit = this.UIRecordWindowWindow1.UIUxCodeEdit;
            WpfEdit uIUxBreedEdit = this.UIRecordWindowWindow1.UIUxBreedEdit;
            WpfEdit uIUxAnimalNameEdit = this.UIRecordWindowWindow1.UIUxAnimalNameEdit;
            WpfEdit uIUxRegNumEdit = this.UIRecordWindowWindow1.UIUxRegNumEdit;
            WpfEdit uIUxOwnerEdit = this.UIRecordWindowWindow1.UIUxOwnerEdit;
            WpfEdit uIUxMorphDateEdit = this.UIRecordWindowWindow1.UIUxMorphDateEdit;
            WpfEdit uIUxVigorEdit = this.UIRecordWindowWindow1.UIUxVigorEdit;
            WpfEdit uIUxMotEdit = this.UIRecordWindowWindow1.UIUxMotEdit;
            WpfEdit uIUxMorphEdit = this.UIRecordWindowWindow1.UIUxMorphEdit;
            WpfEdit uIUxMorphCodeEdit = this.UIRecordWindowWindow1.UIUxMorphCodeEdit;
            WpfEdit uIUxMorphUnitsEdit = this.UIRecordWindowWindow1.UIUxMorphUnitsEdit;
            WpfEdit uIUxToFromLeft1Edit = this.UIRecordWindowWindow1.UIUxToFromLeft1Edit;
            WpfEdit uIUxDateLeft1Edit = this.UIRecordWindowWindow1.UIUxDateLeft1Edit;
            WpfEdit uIUxRecLeft1Edit = this.UIRecordWindowWindow1.UIUxRecLeft1Edit;
            WpfEdit uIUxShipLeft1Edit = this.UIRecordWindowWindow1.UIUxShipLeft1Edit;
            WpfEdit uIUxBalLeft1Edit = this.UIRecordWindowWindow1.UIUxBalLeft1Edit;
            WinButton uICloseButton = this.UIRecordWindowWindow.UICloseButton;
            WinButton uICloseButton1 = this.UIAdditionalInfoWindow.UICloseButton;
            #endregion

            // Click 'Add New Record' button
            Mouse.Click(uIAddNewRecordButton, new Point(73, 22));

            // Type '1234' in 'uxCanNum' text box
            uIUxCanNumEdit.Text = this.AddingRecordParams.UIUxCanNumEditText;

            // Type '123456' in 'uxCode' text box
            uIUxCodeEdit.Text = this.AddingRecordParams.UIUxCodeEditText;

            // Type 'Cross' in 'uxBreed' text box
            uIUxBreedEdit.Text = this.AddingRecordParams.UIUxBreedEditText;

            // Type 'TESTANIMAL' in 'uxAnimalName' text box
            uIUxAnimalNameEdit.Text = this.AddingRecordParams.UIUxAnimalNameEditText;

            // Click 'uxRegNum' text box
            Mouse.Click(uIUxRegNumEdit, new Point(115, 18));

            // Type 'TESTOWNER' in 'uxOwner' text box
            uIUxOwnerEdit.Text = this.AddingRecordParams.UIUxOwnerEditText;

            // Type '05/09/2020' in 'uxMorphDate' text box
            uIUxMorphDateEdit.Text = this.AddingRecordParams.UIUxMorphDateEditText;

            // Type '1' in 'uxVigor' text box
            uIUxVigorEdit.Text = this.AddingRecordParams.UIUxVigorEditText;

            // Type '2' in 'uxMot' text box
            uIUxMotEdit.Text = this.AddingRecordParams.UIUxMotEditText;

            // Type '8' in 'uxMorph' text box
            uIUxMorphEdit.Text = this.AddingRecordParams.UIUxMorphEditText;

            // Type '165' in 'uxMorphCode' text box
            uIUxMorphCodeEdit.Text = this.AddingRecordParams.UIUxMorphCodeEditText;

            // Type '10' in 'uxMorphUnits' text box
            uIUxMorphUnitsEdit.Text = this.AddingRecordParams.UIUxMorphUnitsEditText;

            // Type 'KABSUTEST' in 'uxToFromLeft1' text box
            uIUxToFromLeft1Edit.Text = this.AddingRecordParams.UIUxToFromLeft1EditText;

            // Type '05/09/2020' in 'uxDateLeft1' text box
            uIUxDateLeft1Edit.Text = this.AddingRecordParams.UIUxDateLeft1EditText;

            // Type '1' in 'uxRecLeft1' text box
            uIUxRecLeft1Edit.Text = this.AddingRecordParams.UIUxRecLeft1EditText;

            // Type '2' in 'uxShipLeft1' text box
            uIUxShipLeft1Edit.Text = this.AddingRecordParams.UIUxShipLeft1EditText;

            // Type '3' in 'uxBalLeft1' text box
            uIUxBalLeft1Edit.Text = this.AddingRecordParams.UIUxBalLeft1EditText;

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(21, 27));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(31, 17));
        }
        
        #region Properties
        public virtual SearchingByOwnerParams SearchingByOwnerParams
        {
            get
            {
                if ((this.mSearchingByOwnerParams == null))
                {
                    this.mSearchingByOwnerParams = new SearchingByOwnerParams();
                }
                return this.mSearchingByOwnerParams;
            }
        }
        
        public virtual SearchByOwnerFilterParams SearchByOwnerFilterParams
        {
            get
            {
                if ((this.mSearchByOwnerFilterParams == null))
                {
                    this.mSearchByOwnerFilterParams = new SearchByOwnerFilterParams();
                }
                return this.mSearchByOwnerFilterParams;
            }
        }
        
        public virtual SearchByBreedFilterParams SearchByBreedFilterParams
        {
            get
            {
                if ((this.mSearchByBreedFilterParams == null))
                {
                    this.mSearchByBreedFilterParams = new SearchByBreedFilterParams();
                }
                return this.mSearchByBreedFilterParams;
            }
        }
        
        public virtual SearchByAnimalNameFilterParams SearchByAnimalNameFilterParams
        {
            get
            {
                if ((this.mSearchByAnimalNameFilterParams == null))
                {
                    this.mSearchByAnimalNameFilterParams = new SearchByAnimalNameFilterParams();
                }
                return this.mSearchByAnimalNameFilterParams;
            }
        }
        
        public virtual SearchByCodeFilterParams SearchByCodeFilterParams
        {
            get
            {
                if ((this.mSearchByCodeFilterParams == null))
                {
                    this.mSearchByCodeFilterParams = new SearchByCodeFilterParams();
                }
                return this.mSearchByCodeFilterParams;
            }
        }
        
        public virtual SearchByCanNoFilterParams SearchByCanNoFilterParams
        {
            get
            {
                if ((this.mSearchByCanNoFilterParams == null))
                {
                    this.mSearchByCanNoFilterParams = new SearchByCanNoFilterParams();
                }
                return this.mSearchByCanNoFilterParams;
            }
        }
        
        public virtual SearchByCanFilterParams SearchByCanFilterParams
        {
            get
            {
                if ((this.mSearchByCanFilterParams == null))
                {
                    this.mSearchByCanFilterParams = new SearchByCanFilterParams();
                }
                return this.mSearchByCanFilterParams;
            }
        }
        
        public virtual SearchByTownFilterParams SearchByTownFilterParams
        {
            get
            {
                if ((this.mSearchByTownFilterParams == null))
                {
                    this.mSearchByTownFilterParams = new SearchByTownFilterParams();
                }
                return this.mSearchByTownFilterParams;
            }
        }
        
        public virtual SearchByStateFilterParams SearchByStateFilterParams
        {
            get
            {
                if ((this.mSearchByStateFilterParams == null))
                {
                    this.mSearchByStateFilterParams = new SearchByStateFilterParams();
                }
                return this.mSearchByStateFilterParams;
            }
        }
        
        public virtual SearchByOwnerAndByBreedParams SearchByOwnerAndByBreedParams
        {
            get
            {
                if ((this.mSearchByOwnerAndByBreedParams == null))
                {
                    this.mSearchByOwnerAndByBreedParams = new SearchByOwnerAndByBreedParams();
                }
                return this.mSearchByOwnerAndByBreedParams;
            }
        }
        
        public virtual SearchByOwnerAndCrossParams SearchByOwnerAndCrossParams
        {
            get
            {
                if ((this.mSearchByOwnerAndCrossParams == null))
                {
                    this.mSearchByOwnerAndCrossParams = new SearchByOwnerAndCrossParams();
                }
                return this.mSearchByOwnerAndCrossParams;
            }
        }
        
        public virtual SearchByOwnerAndByBreedAndByAnimalNameParams SearchByOwnerAndByBreedAndByAnimalNameParams
        {
            get
            {
                if ((this.mSearchByOwnerAndByBreedAndByAnimalNameParams == null))
                {
                    this.mSearchByOwnerAndByBreedAndByAnimalNameParams = new SearchByOwnerAndByBreedAndByAnimalNameParams();
                }
                return this.mSearchByOwnerAndByBreedAndByAnimalNameParams;
            }
        }
        
        public virtual SearchByOwnerAndByBreedAndByAnimalNameAndByCodeParams SearchByOwnerAndByBreedAndByAnimalNameAndByCodeParams
        {
            get
            {
                if ((this.mSearchByOwnerAndByBreedAndByAnimalNameAndByCodeParams == null))
                {
                    this.mSearchByOwnerAndByBreedAndByAnimalNameAndByCodeParams = new SearchByOwnerAndByBreedAndByAnimalNameAndByCodeParams();
                }
                return this.mSearchByOwnerAndByBreedAndByAnimalNameAndByCodeParams;
            }
        }
        
        public virtual OpenaRecordToModifyParams OpenaRecordToModifyParams
        {
            get
            {
                if ((this.mOpenaRecordToModifyParams == null))
                {
                    this.mOpenaRecordToModifyParams = new OpenaRecordToModifyParams();
                }
                return this.mOpenaRecordToModifyParams;
            }
        }
        
        public virtual OpenaRecordFromSearchResultParams OpenaRecordFromSearchResultParams
        {
            get
            {
                if ((this.mOpenaRecordFromSearchResultParams == null))
                {
                    this.mOpenaRecordFromSearchResultParams = new OpenaRecordFromSearchResultParams();
                }
                return this.mOpenaRecordFromSearchResultParams;
            }
        }
        
        public virtual VerifyEditingWasSuccesfulParams VerifyEditingWasSuccesfulParams
        {
            get
            {
                if ((this.mVerifyEditingWasSuccesfulParams == null))
                {
                    this.mVerifyEditingWasSuccesfulParams = new VerifyEditingWasSuccesfulParams();
                }
                return this.mVerifyEditingWasSuccesfulParams;
            }
        }
        
        public virtual TestForSumOfUnitsParams TestForSumOfUnitsParams
        {
            get
            {
                if ((this.mTestForSumOfUnitsParams == null))
                {
                    this.mTestForSumOfUnitsParams = new TestForSumOfUnitsParams();
                }
                return this.mTestForSumOfUnitsParams;
            }
        }
        
        public virtual ToSearchForSumOfUnitsWithDifferentFilterParams ToSearchForSumOfUnitsWithDifferentFilterParams
        {
            get
            {
                if ((this.mToSearchForSumOfUnitsWithDifferentFilterParams == null))
                {
                    this.mToSearchForSumOfUnitsWithDifferentFilterParams = new ToSearchForSumOfUnitsWithDifferentFilterParams();
                }
                return this.mToSearchForSumOfUnitsWithDifferentFilterParams;
            }
        }
        
        public virtual ToSearchForSumOfUnitsWithADifferentFilterParams ToSearchForSumOfUnitsWithADifferentFilterParams
        {
            get
            {
                if ((this.mToSearchForSumOfUnitsWithADifferentFilterParams == null))
                {
                    this.mToSearchForSumOfUnitsWithADifferentFilterParams = new ToSearchForSumOfUnitsWithADifferentFilterParams();
                }
                return this.mToSearchForSumOfUnitsWithADifferentFilterParams;
            }
        }
        
        public virtual IsThisGonnaWorkParams IsThisGonnaWorkParams
        {
            get
            {
                if ((this.mIsThisGonnaWorkParams == null))
                {
                    this.mIsThisGonnaWorkParams = new IsThisGonnaWorkParams();
                }
                return this.mIsThisGonnaWorkParams;
            }
        }
        
        public virtual NotSureAboutThisParams NotSureAboutThisParams
        {
            get
            {
                if ((this.mNotSureAboutThisParams == null))
                {
                    this.mNotSureAboutThisParams = new NotSureAboutThisParams();
                }
                return this.mNotSureAboutThisParams;
            }
        }
        
        public virtual AddingRecordParams AddingRecordParams
        {
            get
            {
                if ((this.mAddingRecordParams == null))
                {
                    this.mAddingRecordParams = new AddingRecordParams();
                }
                return this.mAddingRecordParams;
            }
        }
        
        public UIDatabaseAppWindow UIDatabaseAppWindow
        {
            get
            {
                if ((this.mUIDatabaseAppWindow == null))
                {
                    this.mUIDatabaseAppWindow = new UIDatabaseAppWindow();
                }
                return this.mUIDatabaseAppWindow;
            }
        }
        
        public UISearchWindow UISearchWindow
        {
            get
            {
                if ((this.mUISearchWindow == null))
                {
                    this.mUISearchWindow = new UISearchWindow();
                }
                return this.mUISearchWindow;
            }
        }
        
        public UISearchResultsWindow UISearchResultsWindow
        {
            get
            {
                if ((this.mUISearchResultsWindow == null))
                {
                    this.mUISearchResultsWindow = new UISearchResultsWindow();
                }
                return this.mUISearchResultsWindow;
            }
        }
        
        public UISearchResultsWindow1 UISearchResultsWindow1
        {
            get
            {
                if ((this.mUISearchResultsWindow1 == null))
                {
                    this.mUISearchResultsWindow1 = new UISearchResultsWindow1();
                }
                return this.mUISearchResultsWindow1;
            }
        }
        
        public UIRecordWindowWindow UIRecordWindowWindow
        {
            get
            {
                if ((this.mUIRecordWindowWindow == null))
                {
                    this.mUIRecordWindowWindow = new UIRecordWindowWindow();
                }
                return this.mUIRecordWindowWindow;
            }
        }
        
        public UIAdditionalInfoWindow UIAdditionalInfoWindow
        {
            get
            {
                if ((this.mUIAdditionalInfoWindow == null))
                {
                    this.mUIAdditionalInfoWindow = new UIAdditionalInfoWindow();
                }
                return this.mUIAdditionalInfoWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIRecordWindowWindow1 UIRecordWindowWindow1
        {
            get
            {
                if ((this.mUIRecordWindowWindow1 == null))
                {
                    this.mUIRecordWindowWindow1 = new UIRecordWindowWindow1();
                }
                return this.mUIRecordWindowWindow1;
            }
        }
        #endregion
        
        #region Fields
        private SearchingByOwnerParams mSearchingByOwnerParams;
        
        private SearchByOwnerFilterParams mSearchByOwnerFilterParams;
        
        private SearchByBreedFilterParams mSearchByBreedFilterParams;
        
        private SearchByAnimalNameFilterParams mSearchByAnimalNameFilterParams;
        
        private SearchByCodeFilterParams mSearchByCodeFilterParams;
        
        private SearchByCanNoFilterParams mSearchByCanNoFilterParams;
        
        private SearchByCanFilterParams mSearchByCanFilterParams;
        
        private SearchByTownFilterParams mSearchByTownFilterParams;
        
        private SearchByStateFilterParams mSearchByStateFilterParams;
        
        private SearchByOwnerAndByBreedParams mSearchByOwnerAndByBreedParams;
        
        private SearchByOwnerAndCrossParams mSearchByOwnerAndCrossParams;
        
        private SearchByOwnerAndByBreedAndByAnimalNameParams mSearchByOwnerAndByBreedAndByAnimalNameParams;
        
        private SearchByOwnerAndByBreedAndByAnimalNameAndByCodeParams mSearchByOwnerAndByBreedAndByAnimalNameAndByCodeParams;
        
        private OpenaRecordToModifyParams mOpenaRecordToModifyParams;
        
        private OpenaRecordFromSearchResultParams mOpenaRecordFromSearchResultParams;
        
        private VerifyEditingWasSuccesfulParams mVerifyEditingWasSuccesfulParams;
        
        private TestForSumOfUnitsParams mTestForSumOfUnitsParams;
        
        private ToSearchForSumOfUnitsWithDifferentFilterParams mToSearchForSumOfUnitsWithDifferentFilterParams;
        
        private ToSearchForSumOfUnitsWithADifferentFilterParams mToSearchForSumOfUnitsWithADifferentFilterParams;
        
        private IsThisGonnaWorkParams mIsThisGonnaWorkParams;
        
        private NotSureAboutThisParams mNotSureAboutThisParams;
        
        private AddingRecordParams mAddingRecordParams;
        
        private UIDatabaseAppWindow mUIDatabaseAppWindow;
        
        private UISearchWindow mUISearchWindow;
        
        private UISearchResultsWindow mUISearchResultsWindow;
        
        private UISearchResultsWindow1 mUISearchResultsWindow1;
        
        private UIRecordWindowWindow mUIRecordWindowWindow;
        
        private UIAdditionalInfoWindow mUIAdditionalInfoWindow;
        
        private UIOKWindow mUIOKWindow;
        
        private UIRecordWindowWindow1 mUIRecordWindowWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SearchingByOwner'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class SearchingByOwnerParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Mouse' in 'uxSearchContents1' text box
        /// </summary>
        public string UIUxSearchContents1EditText = "Mouse";
        
        /// <summary>
        /// Select 'Owner' in 'uxSearchTerm1' combo box
        /// </summary>
        public string UIUxSearchTerm1ComboBoxSelectedItem = "Owner";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SearchByOwnerFilter'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class SearchByOwnerFilterParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Mouse' in 'uxSearchContents1' text box
        /// </summary>
        public string UIUxSearchContents1EditText = "Mouse";
        
        /// <summary>
        /// Select 'Owner' in 'uxSearchTerm1' combo box
        /// </summary>
        public string UIUxSearchTerm1ComboBoxSelectedItem = "Owner";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SearchByBreedFilter'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class SearchByBreedFilterParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Mouse' in 'uxSearchContents1' text box
        /// </summary>
        public string UIUxSearchContents1EditText = "Mouse";
        
        /// <summary>
        /// Select 'Breed' in 'uxSearchTerm1' combo box
        /// </summary>
        public string UIUxSearchTerm1ComboBoxSelectedItem = "Breed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SearchByAnimalNameFilter'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class SearchByAnimalNameFilterParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Holy Smoker' in 'uxSearchContents1' text box
        /// </summary>
        public string UIUxSearchContents1EditText = "Holy Smoker";
        
        /// <summary>
        /// Select 'Animal Name' in 'uxSearchTerm1' combo box
        /// </summary>
        public string UIUxSearchTerm1ComboBoxSelectedItem = "Animal Name";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SearchByCodeFilter'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class SearchByCodeFilterParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'countyo' in 'uxSearchContents1' text box
        /// </summary>
        public string UIUxSearchContents1EditText = "countyo";
        
        /// <summary>
        /// Select 'Code' in 'uxSearchTerm1' combo box
        /// </summary>
        public string UIUxSearchTerm1ComboBoxSelectedItem = "Code";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SearchByCanNoFilter'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class SearchByCanNoFilterParams
    {
        
        #region Fields
        /// <summary>
        /// Type '658' in 'uxSearchContents1' text box
        /// </summary>
        public string UIUxSearchContents1EditText = "658";
        
        /// <summary>
        /// Select 'Can #' in 'uxSearchTerm1' combo box
        /// </summary>
        public string UIUxSearchTerm1ComboBoxSelectedItem = "Can #";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SearchByCanFilter'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class SearchByCanFilterParams
    {
        
        #region Fields
        /// <summary>
        /// Type '658' in 'uxSearchContents1' text box
        /// </summary>
        public string UIUxSearchContents1EditText = "658";
        
        /// <summary>
        /// Select 'Can #' in 'uxSearchTerm1' combo box
        /// </summary>
        public string UIUxSearchTerm1ComboBoxSelectedItem = "Can #";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SearchByTownFilter'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class SearchByTownFilterParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Lemasa' in 'uxSearchContents1' text box
        /// </summary>
        public string UIUxSearchContents1EditText = "Lemasa";
        
        /// <summary>
        /// Select 'Town' in 'uxSearchTerm1' combo box
        /// </summary>
        public string UIUxSearchTerm1ComboBoxSelectedItem = "Town";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SearchByStateFilter'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class SearchByStateFilterParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'KS' in 'uxSearchContents1' text box
        /// </summary>
        public string UIUxSearchContents1EditText = "KS";
        
        /// <summary>
        /// Select 'State' in 'uxSearchTerm1' combo box
        /// </summary>
        public string UIUxSearchTerm1ComboBoxSelectedItem = "State";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SearchByOwnerAndByBreed'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class SearchByOwnerAndByBreedParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Mouse' in 'uxSearchContents1' text box
        /// </summary>
        public string UIUxSearchContents1EditText = "Mouse";
        
        /// <summary>
        /// Select 'Owner' in 'uxSearchTerm1' combo box
        /// </summary>
        public string UIUxSearchTerm1ComboBoxSelectedItem = "Owner";
        
        /// <summary>
        /// Type 'Cross' in 'uxSearchContents2' text box
        /// </summary>
        public string UIUxSearchContents2EditText = "Cross";
        
        /// <summary>
        /// Select 'Breed' in 'uxSearchTerm2' combo box
        /// </summary>
        public string UIUxSearchTerm2ComboBoxSelectedItem = "Breed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SearchByOwnerAndCross'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class SearchByOwnerAndCrossParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Mouse' in 'uxSearchContents1' text box
        /// </summary>
        public string UIUxSearchContents1EditText = "Mouse";
        
        /// <summary>
        /// Select 'Owner' in 'uxSearchTerm1' combo box
        /// </summary>
        public string UIUxSearchTerm1ComboBoxSelectedItem = "Owner";
        
        /// <summary>
        /// Type 'Cross' in 'uxSearchContents2' text box
        /// </summary>
        public string UIUxSearchContents2EditText = "Cross";
        
        /// <summary>
        /// Select 'Breed' in 'uxSearchTerm2' combo box
        /// </summary>
        public string UIUxSearchTerm2ComboBoxSelectedItem = "Breed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SearchByOwnerAndByBreedAndByAnimalName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class SearchByOwnerAndByBreedAndByAnimalNameParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Mouse' in 'uxSearchContents1' text box
        /// </summary>
        public string UIUxSearchContents1EditText = "Mouse";
        
        /// <summary>
        /// Select 'Owner' in 'uxSearchTerm1' combo box
        /// </summary>
        public string UIUxSearchTerm1ComboBoxSelectedItem = "Owner";
        
        /// <summary>
        /// Type 'Cross' in 'uxSearchContents2' text box
        /// </summary>
        public string UIUxSearchContents2EditText = "Cross";
        
        /// <summary>
        /// Select 'Breed' in 'uxSearchTerm2' combo box
        /// </summary>
        public string UIUxSearchTerm2ComboBoxSelectedItem = "Breed";
        
        /// <summary>
        /// Type 'Holy Smoker' in 'uxSearchContents3' text box
        /// </summary>
        public string UIUxSearchContents3EditText = "Holy Smoker";
        
        /// <summary>
        /// Select 'Animal Name' in 'uxSearchTerm3' combo box
        /// </summary>
        public string UIUxSearchTerm3ComboBoxSelectedItem = "Animal Name";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SearchByOwnerAndByBreedAndByAnimalNameAndByCode'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class SearchByOwnerAndByBreedAndByAnimalNameAndByCodeParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Mouse' in 'uxSearchContents1' text box
        /// </summary>
        public string UIUxSearchContents1EditText = "Mouse";
        
        /// <summary>
        /// Select 'Owner' in 'uxSearchTerm1' combo box
        /// </summary>
        public string UIUxSearchTerm1ComboBoxSelectedItem = "Owner";
        
        /// <summary>
        /// Type 'Cross' in 'uxSearchContents2' text box
        /// </summary>
        public string UIUxSearchContents2EditText = "Cross";
        
        /// <summary>
        /// Select 'Breed' in 'uxSearchTerm2' combo box
        /// </summary>
        public string UIUxSearchTerm2ComboBoxSelectedItem = "Breed";
        
        /// <summary>
        /// Type 'Holy Smoker' in 'uxSearchContents3' text box
        /// </summary>
        public string UIUxSearchContents3EditText = "Holy Smoker";
        
        /// <summary>
        /// Type '54XB399' in 'uxSearchContents4' text box
        /// </summary>
        public string UIUxSearchContents4EditText = "54XB399";
        
        /// <summary>
        /// Select 'Animal Name' in 'uxSearchTerm3' combo box
        /// </summary>
        public string UIUxSearchTerm3ComboBoxSelectedItem = "Animal Name";
        
        /// <summary>
        /// Select 'Code' in 'uxSearchTerm4' combo box
        /// </summary>
        public string UIUxSearchTerm4ComboBoxSelectedItem = "Code";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenaRecordToModify'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class OpenaRecordToModifyParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Mouse' in 'uxSearchContents1' text box
        /// </summary>
        public string UIUxSearchContents1EditText = "Mouse";
        
        /// <summary>
        /// Select 'Owner' in 'uxSearchTerm1' combo box
        /// </summary>
        public string UIUxSearchTerm1ComboBoxSelectedItem = "Owner";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenaRecordFromSearchResult'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class OpenaRecordFromSearchResultParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Mouse' in 'uxSearchContents1' text box
        /// </summary>
        public string UIUxSearchContents1EditText = "Mouse";
        
        /// <summary>
        /// Select 'Owner' in 'uxSearchTerm1' combo box
        /// </summary>
        public string UIUxSearchTerm1ComboBoxSelectedItem = "Owner";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyEditingWasSuccesful'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class VerifyEditingWasSuccesfulParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Mouse' in 'uxSearchContents1' text box
        /// </summary>
        public string UIUxSearchContents1EditText = "Mouse";
        
        /// <summary>
        /// Select 'Owner' in 'uxSearchTerm1' combo box
        /// </summary>
        public string UIUxSearchTerm1ComboBoxSelectedItem = "Owner";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestForSumOfUnits'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class TestForSumOfUnitsParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Mouse Micky' in 'uxSearchContents1' text box
        /// </summary>
        public string UIUxSearchContents1EditText = "Mouse Micky";
        
        /// <summary>
        /// Select 'Owner' in 'uxSearchTerm1' combo box
        /// </summary>
        public string UIUxSearchTerm1ComboBoxSelectedItem = "Owner";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ToSearchForSumOfUnitsWithDifferentFilter'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class ToSearchForSumOfUnitsWithDifferentFilterParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Mouse' in 'uxSearchContents1' text box
        /// </summary>
        public string UIUxSearchContents1EditText = "Mouse";
        
        /// <summary>
        /// Select 'Breed' in 'uxSearchTerm1' combo box
        /// </summary>
        public string UIUxSearchTerm1ComboBoxSelectedItem = "Breed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ToSearchForSumOfUnitsWithADifferentFilter'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class ToSearchForSumOfUnitsWithADifferentFilterParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Mouse' in 'uxSearchContents1' text box
        /// </summary>
        public string UIUxSearchContents1EditText = "Mouse";
        
        /// <summary>
        /// Select 'Breed' in 'uxSearchTerm1' combo box
        /// </summary>
        public string UIUxSearchTerm1ComboBoxSelectedItem = "Breed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'IsThisGonnaWork'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class IsThisGonnaWorkParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Mouse' in 'uxSearchContents1' text box
        /// </summary>
        public string UIUxSearchContents1EditText = "Mouse";
        
        /// <summary>
        /// Select 'Breed' in 'uxSearchTerm1' combo box
        /// </summary>
        public string UIUxSearchTerm1ComboBoxSelectedItem = "Breed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'NotSureAboutThis'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class NotSureAboutThisParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Mouse' in 'uxSearchContents1' text box
        /// </summary>
        public string UIUxSearchContents1EditText = "Mouse";
        
        /// <summary>
        /// Select 'Breed' in 'uxSearchTerm1' combo box
        /// </summary>
        public string UIUxSearchTerm1ComboBoxSelectedItem = "Breed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddingRecord'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class AddingRecordParams
    {
        
        #region Fields
        /// <summary>
        /// Type '1234' in 'uxCanNum' text box
        /// </summary>
        public string UIUxCanNumEditText = "1234";
        
        /// <summary>
        /// Type '123456' in 'uxCode' text box
        /// </summary>
        public string UIUxCodeEditText = "123456";
        
        /// <summary>
        /// Type 'Cross' in 'uxBreed' text box
        /// </summary>
        public string UIUxBreedEditText = "Cross";
        
        /// <summary>
        /// Type 'TESTANIMAL' in 'uxAnimalName' text box
        /// </summary>
        public string UIUxAnimalNameEditText = "TESTANIMAL";
        
        /// <summary>
        /// Type 'TESTOWNER' in 'uxOwner' text box
        /// </summary>
        public string UIUxOwnerEditText = "TESTOWNER";
        
        /// <summary>
        /// Type '05/09/2020' in 'uxMorphDate' text box
        /// </summary>
        public string UIUxMorphDateEditText = "05/09/2020";
        
        /// <summary>
        /// Type '1' in 'uxVigor' text box
        /// </summary>
        public string UIUxVigorEditText = "1";
        
        /// <summary>
        /// Type '2' in 'uxMot' text box
        /// </summary>
        public string UIUxMotEditText = "2";
        
        /// <summary>
        /// Type '8' in 'uxMorph' text box
        /// </summary>
        public string UIUxMorphEditText = "8";
        
        /// <summary>
        /// Type '165' in 'uxMorphCode' text box
        /// </summary>
        public string UIUxMorphCodeEditText = "165";
        
        /// <summary>
        /// Type '10' in 'uxMorphUnits' text box
        /// </summary>
        public string UIUxMorphUnitsEditText = "10";
        
        /// <summary>
        /// Type 'KABSUTEST' in 'uxToFromLeft1' text box
        /// </summary>
        public string UIUxToFromLeft1EditText = "KABSUTEST";
        
        /// <summary>
        /// Type '05/09/2020' in 'uxDateLeft1' text box
        /// </summary>
        public string UIUxDateLeft1EditText = "05/09/2020";
        
        /// <summary>
        /// Type '1' in 'uxRecLeft1' text box
        /// </summary>
        public string UIUxRecLeft1EditText = "1";
        
        /// <summary>
        /// Type '2' in 'uxShipLeft1' text box
        /// </summary>
        public string UIUxShipLeft1EditText = "2";
        
        /// <summary>
        /// Type '3' in 'uxBalLeft1' text box
        /// </summary>
        public string UIUxBalLeft1EditText = "3";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class UIDatabaseAppWindow : WpfWindow
    {
        
        public UIDatabaseAppWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Database App";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Database App");
            #endregion
        }
        
        #region Properties
        public WpfButton UIModifyRecordButton
        {
            get
            {
                if ((this.mUIModifyRecordButton == null))
                {
                    this.mUIModifyRecordButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIModifyRecordButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "uxModifyRecord";
                    this.mUIModifyRecordButton.WindowTitles.Add("Database App");
                    #endregion
                }
                return this.mUIModifyRecordButton;
            }
        }
        
        public WpfWindow UIWpfWindow
        {
            get
            {
                if ((this.mUIWpfWindow == null))
                {
                    this.mUIWpfWindow = new WpfWindow(this);
                    #region Search Criteria
                    this.mUIWpfWindow.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
                    this.mUIWpfWindow.WindowTitles.Add("Database App");
                    #endregion
                }
                return this.mUIWpfWindow;
            }
        }
        
        public WpfButton UIAddNewRecordButton
        {
            get
            {
                if ((this.mUIAddNewRecordButton == null))
                {
                    this.mUIAddNewRecordButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIAddNewRecordButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "uxAddRecord";
                    this.mUIAddNewRecordButton.WindowTitles.Add("Database App");
                    #endregion
                }
                return this.mUIAddNewRecordButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIModifyRecordButton;
        
        private WpfWindow mUIWpfWindow;
        
        private WpfButton mUIAddNewRecordButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class UISearchWindow : WpfWindow
    {
        
        public UISearchWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Search";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Search");
            #endregion
        }
        
        #region Properties
        public WpfWindow UIWpfWindow
        {
            get
            {
                if ((this.mUIWpfWindow == null))
                {
                    this.mUIWpfWindow = new WpfWindow(this);
                    #region Search Criteria
                    this.mUIWpfWindow.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
                    this.mUIWpfWindow.WindowTitles.Add("Search");
                    #endregion
                }
                return this.mUIWpfWindow;
            }
        }
        
        public WpfEdit UIUxSearchContents1Edit
        {
            get
            {
                if ((this.mUIUxSearchContents1Edit == null))
                {
                    this.mUIUxSearchContents1Edit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUxSearchContents1Edit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "uxSearchContents1";
                    this.mUIUxSearchContents1Edit.WindowTitles.Add("Search");
                    #endregion
                }
                return this.mUIUxSearchContents1Edit;
            }
        }
        
        public WpfComboBox UIUxSearchTerm1ComboBox
        {
            get
            {
                if ((this.mUIUxSearchTerm1ComboBox == null))
                {
                    this.mUIUxSearchTerm1ComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUIUxSearchTerm1ComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "uxSearchTerm1";
                    this.mUIUxSearchTerm1ComboBox.WindowTitles.Add("Search");
                    #endregion
                }
                return this.mUIUxSearchTerm1ComboBox;
            }
        }
        
        public WpfButton UISearchButton
        {
            get
            {
                if ((this.mUISearchButton == null))
                {
                    this.mUISearchButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUISearchButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "uxSearch";
                    this.mUISearchButton.WindowTitles.Add("Search");
                    #endregion
                }
                return this.mUISearchButton;
            }
        }
        
        public WpfEdit UIUxSearchContents2Edit
        {
            get
            {
                if ((this.mUIUxSearchContents2Edit == null))
                {
                    this.mUIUxSearchContents2Edit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUxSearchContents2Edit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "uxSearchContents2";
                    this.mUIUxSearchContents2Edit.WindowTitles.Add("Search");
                    #endregion
                }
                return this.mUIUxSearchContents2Edit;
            }
        }
        
        public WpfComboBox UIUxSearchTerm2ComboBox
        {
            get
            {
                if ((this.mUIUxSearchTerm2ComboBox == null))
                {
                    this.mUIUxSearchTerm2ComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUIUxSearchTerm2ComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "uxSearchTerm2";
                    this.mUIUxSearchTerm2ComboBox.WindowTitles.Add("Search");
                    #endregion
                }
                return this.mUIUxSearchTerm2ComboBox;
            }
        }
        
        public WpfEdit UIUxSearchContents3Edit
        {
            get
            {
                if ((this.mUIUxSearchContents3Edit == null))
                {
                    this.mUIUxSearchContents3Edit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUxSearchContents3Edit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "uxSearchContents3";
                    this.mUIUxSearchContents3Edit.WindowTitles.Add("Search");
                    #endregion
                }
                return this.mUIUxSearchContents3Edit;
            }
        }
        
        public WpfComboBox UIUxSearchTerm3ComboBox
        {
            get
            {
                if ((this.mUIUxSearchTerm3ComboBox == null))
                {
                    this.mUIUxSearchTerm3ComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUIUxSearchTerm3ComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "uxSearchTerm3";
                    this.mUIUxSearchTerm3ComboBox.WindowTitles.Add("Search");
                    #endregion
                }
                return this.mUIUxSearchTerm3ComboBox;
            }
        }
        
        public WpfEdit UIUxSearchContents4Edit
        {
            get
            {
                if ((this.mUIUxSearchContents4Edit == null))
                {
                    this.mUIUxSearchContents4Edit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUxSearchContents4Edit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "uxSearchContents4";
                    this.mUIUxSearchContents4Edit.WindowTitles.Add("Search");
                    #endregion
                }
                return this.mUIUxSearchContents4Edit;
            }
        }
        
        public WpfComboBox UIUxSearchTerm4ComboBox
        {
            get
            {
                if ((this.mUIUxSearchTerm4ComboBox == null))
                {
                    this.mUIUxSearchTerm4ComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUIUxSearchTerm4ComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "uxSearchTerm4";
                    this.mUIUxSearchTerm4ComboBox.WindowTitles.Add("Search");
                    #endregion
                }
                return this.mUIUxSearchTerm4ComboBox;
            }
        }
        
        public WpfButton UISumofUnitsButton
        {
            get
            {
                if ((this.mUISumofUnitsButton == null))
                {
                    this.mUISumofUnitsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUISumofUnitsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "uxUnitSum";
                    this.mUISumofUnitsButton.WindowTitles.Add("Search");
                    #endregion
                }
                return this.mUISumofUnitsButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfWindow mUIWpfWindow;
        
        private WpfEdit mUIUxSearchContents1Edit;
        
        private WpfComboBox mUIUxSearchTerm1ComboBox;
        
        private WpfButton mUISearchButton;
        
        private WpfEdit mUIUxSearchContents2Edit;
        
        private WpfComboBox mUIUxSearchTerm2ComboBox;
        
        private WpfEdit mUIUxSearchContents3Edit;
        
        private WpfComboBox mUIUxSearchTerm3ComboBox;
        
        private WpfEdit mUIUxSearchContents4Edit;
        
        private WpfComboBox mUIUxSearchTerm4ComboBox;
        
        private WpfButton mUISumofUnitsButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class UISearchResultsWindow : WpfWindow
    {
        
        public UISearchResultsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Search Results";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Search Results");
            #endregion
        }
        
        #region Properties
        public WpfWindow UIWpfWindow
        {
            get
            {
                if ((this.mUIWpfWindow == null))
                {
                    this.mUIWpfWindow = new WpfWindow(this);
                    #region Search Criteria
                    this.mUIWpfWindow.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
                    this.mUIWpfWindow.WindowTitles.Add("Search Results");
                    #endregion
                }
                return this.mUIWpfWindow;
            }
        }
        #endregion
        
        #region Fields
        private WpfWindow mUIWpfWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class UISearchResultsWindow1 : WinWindow
    {
        
        public UISearchResultsWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Search Results";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Search Results");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Search Results");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class UIRecordWindowWindow : WinWindow
    {
        
        public UIRecordWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Record Window";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Record Window");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Record Window");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class UIAdditionalInfoWindow : WinWindow
    {
        
        public UIAdditionalInfoWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Additional Info";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Additional Info");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Additional Info");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "16.0.29514.35")]
    public class UIRecordWindowWindow1 : WpfWindow
    {
        
        public UIRecordWindowWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Record Window";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Record Window");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIUxCanNumEdit
        {
            get
            {
                if ((this.mUIUxCanNumEdit == null))
                {
                    this.mUIUxCanNumEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUxCanNumEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "uxCanNum";
                    this.mUIUxCanNumEdit.WindowTitles.Add("Record Window");
                    #endregion
                }
                return this.mUIUxCanNumEdit;
            }
        }
        
        public WpfEdit UIUxCodeEdit
        {
            get
            {
                if ((this.mUIUxCodeEdit == null))
                {
                    this.mUIUxCodeEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUxCodeEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "uxCode";
                    this.mUIUxCodeEdit.WindowTitles.Add("Record Window");
                    #endregion
                }
                return this.mUIUxCodeEdit;
            }
        }
        
        public WpfEdit UIUxBreedEdit
        {
            get
            {
                if ((this.mUIUxBreedEdit == null))
                {
                    this.mUIUxBreedEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUxBreedEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "uxBreed";
                    this.mUIUxBreedEdit.WindowTitles.Add("Record Window");
                    #endregion
                }
                return this.mUIUxBreedEdit;
            }
        }
        
        public WpfEdit UIUxAnimalNameEdit
        {
            get
            {
                if ((this.mUIUxAnimalNameEdit == null))
                {
                    this.mUIUxAnimalNameEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUxAnimalNameEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "uxAnimalName";
                    this.mUIUxAnimalNameEdit.WindowTitles.Add("Record Window");
                    #endregion
                }
                return this.mUIUxAnimalNameEdit;
            }
        }
        
        public WpfEdit UIUxRegNumEdit
        {
            get
            {
                if ((this.mUIUxRegNumEdit == null))
                {
                    this.mUIUxRegNumEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUxRegNumEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "uxRegNum";
                    this.mUIUxRegNumEdit.WindowTitles.Add("Record Window");
                    #endregion
                }
                return this.mUIUxRegNumEdit;
            }
        }
        
        public WpfEdit UIUxOwnerEdit
        {
            get
            {
                if ((this.mUIUxOwnerEdit == null))
                {
                    this.mUIUxOwnerEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUxOwnerEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "uxOwner";
                    this.mUIUxOwnerEdit.WindowTitles.Add("Record Window");
                    #endregion
                }
                return this.mUIUxOwnerEdit;
            }
        }
        
        public WpfEdit UIUxMorphDateEdit
        {
            get
            {
                if ((this.mUIUxMorphDateEdit == null))
                {
                    this.mUIUxMorphDateEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUxMorphDateEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "uxMorphDate";
                    this.mUIUxMorphDateEdit.WindowTitles.Add("Record Window");
                    #endregion
                }
                return this.mUIUxMorphDateEdit;
            }
        }
        
        public WpfEdit UIUxVigorEdit
        {
            get
            {
                if ((this.mUIUxVigorEdit == null))
                {
                    this.mUIUxVigorEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUxVigorEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "uxVigor";
                    this.mUIUxVigorEdit.WindowTitles.Add("Record Window");
                    #endregion
                }
                return this.mUIUxVigorEdit;
            }
        }
        
        public WpfEdit UIUxMotEdit
        {
            get
            {
                if ((this.mUIUxMotEdit == null))
                {
                    this.mUIUxMotEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUxMotEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "uxMot";
                    this.mUIUxMotEdit.WindowTitles.Add("Record Window");
                    #endregion
                }
                return this.mUIUxMotEdit;
            }
        }
        
        public WpfEdit UIUxMorphEdit
        {
            get
            {
                if ((this.mUIUxMorphEdit == null))
                {
                    this.mUIUxMorphEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUxMorphEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "uxMorph";
                    this.mUIUxMorphEdit.WindowTitles.Add("Record Window");
                    #endregion
                }
                return this.mUIUxMorphEdit;
            }
        }
        
        public WpfEdit UIUxMorphCodeEdit
        {
            get
            {
                if ((this.mUIUxMorphCodeEdit == null))
                {
                    this.mUIUxMorphCodeEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUxMorphCodeEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "uxMorphCode";
                    this.mUIUxMorphCodeEdit.WindowTitles.Add("Record Window");
                    #endregion
                }
                return this.mUIUxMorphCodeEdit;
            }
        }
        
        public WpfEdit UIUxMorphUnitsEdit
        {
            get
            {
                if ((this.mUIUxMorphUnitsEdit == null))
                {
                    this.mUIUxMorphUnitsEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUxMorphUnitsEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "uxMorphUnits";
                    this.mUIUxMorphUnitsEdit.WindowTitles.Add("Record Window");
                    #endregion
                }
                return this.mUIUxMorphUnitsEdit;
            }
        }
        
        public WpfEdit UIUxToFromLeft1Edit
        {
            get
            {
                if ((this.mUIUxToFromLeft1Edit == null))
                {
                    this.mUIUxToFromLeft1Edit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUxToFromLeft1Edit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "uxToFromLeft1";
                    this.mUIUxToFromLeft1Edit.WindowTitles.Add("Record Window");
                    #endregion
                }
                return this.mUIUxToFromLeft1Edit;
            }
        }
        
        public WpfEdit UIUxDateLeft1Edit
        {
            get
            {
                if ((this.mUIUxDateLeft1Edit == null))
                {
                    this.mUIUxDateLeft1Edit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUxDateLeft1Edit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "uxDateLeft1";
                    this.mUIUxDateLeft1Edit.WindowTitles.Add("Record Window");
                    #endregion
                }
                return this.mUIUxDateLeft1Edit;
            }
        }
        
        public WpfEdit UIUxRecLeft1Edit
        {
            get
            {
                if ((this.mUIUxRecLeft1Edit == null))
                {
                    this.mUIUxRecLeft1Edit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUxRecLeft1Edit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "uxRecLeft1";
                    this.mUIUxRecLeft1Edit.WindowTitles.Add("Record Window");
                    #endregion
                }
                return this.mUIUxRecLeft1Edit;
            }
        }
        
        public WpfEdit UIUxShipLeft1Edit
        {
            get
            {
                if ((this.mUIUxShipLeft1Edit == null))
                {
                    this.mUIUxShipLeft1Edit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUxShipLeft1Edit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "uxShipLeft1";
                    this.mUIUxShipLeft1Edit.WindowTitles.Add("Record Window");
                    #endregion
                }
                return this.mUIUxShipLeft1Edit;
            }
        }
        
        public WpfEdit UIUxBalLeft1Edit
        {
            get
            {
                if ((this.mUIUxBalLeft1Edit == null))
                {
                    this.mUIUxBalLeft1Edit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUxBalLeft1Edit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "uxBalLeft1";
                    this.mUIUxBalLeft1Edit.WindowTitles.Add("Record Window");
                    #endregion
                }
                return this.mUIUxBalLeft1Edit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIUxCanNumEdit;
        
        private WpfEdit mUIUxCodeEdit;
        
        private WpfEdit mUIUxBreedEdit;
        
        private WpfEdit mUIUxAnimalNameEdit;
        
        private WpfEdit mUIUxRegNumEdit;
        
        private WpfEdit mUIUxOwnerEdit;
        
        private WpfEdit mUIUxMorphDateEdit;
        
        private WpfEdit mUIUxVigorEdit;
        
        private WpfEdit mUIUxMotEdit;
        
        private WpfEdit mUIUxMorphEdit;
        
        private WpfEdit mUIUxMorphCodeEdit;
        
        private WpfEdit mUIUxMorphUnitsEdit;
        
        private WpfEdit mUIUxToFromLeft1Edit;
        
        private WpfEdit mUIUxDateLeft1Edit;
        
        private WpfEdit mUIUxRecLeft1Edit;
        
        private WpfEdit mUIUxShipLeft1Edit;
        
        private WpfEdit mUIUxBalLeft1Edit;
        #endregion
    }
}
